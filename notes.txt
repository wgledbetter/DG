In order to avoid memory read conflicts, I think each vertex in the active list should store the values of its neighbors.
This will result in duplicate data for points which are bordered by two active list points, but according to Jeong, this is a beneficial tradeoff, especially for cuda implementations.
I do wonder about overhead in creating that data structure on each while iteration.


2 Sep:
Does it make sense to have crtp in this?

Need Mesh::vert_closest_to(Eigen::Vector) and Mesh::verts_inside(vector<double> highs, vector<double> lows)


4 Sep:
Need to have different mesh types inherit from base mesh and be written in separate files.
Need to make sure points can't be duplicated on active list or addThese or removeThese.
Need to ensure that accessing addThese and removeThese works in parallel.

5 Sep:
To implement different solvePDE functions, use policy-based design.
    HamiltonianPolicy::solvePDE(v)
EikonalSolution will need to inherit from HamiltonianPolicy, and HamiltonianPolicy will CRTP back to EikonalSolution to see things about mesh neighbors and such

Each thread could have an addThese and a removeThese which are then conglomerated into one vector